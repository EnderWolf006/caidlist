{
    // Helper Template
    "arg": "",
    // Help text
    "camerashake.add": "为玩家应用镜头摇晃效果。",
    "camerashake.stop": "为玩家移除镜头摇晃效果。",
    "clear.default": "清除玩家物品栏中的物品。",
    "clearspawnpoint.default": "重置玩家重生点。",
    "clone.default": "在区域间复制方块。",
    "clone.filtered.withBlockState": "在区域间复制方块。",
    "clone.filtered.withDataValue": "在区域间复制方块。",
    "damage.default": "对实体造成伤害。",
    "damage.withDamager": "对实体造成来源于特定实体的伤害。",
    "daylock.default": "切换昼夜更替锁定。",
    "deop.default": "撤销管理员身份。",
    "dialogue.change": "更改与NPC的对话场景。",
    "dialogue.open": "打开与NPC的对话场景。",
    "difficulty.withEnum": "更改游戏难度。",
    "difficulty.withInt": "更改游戏难度。",
    "effect.add": "为实体添加状态效果。",
    "effect.clear": "清除实体的状态效果。",
    "enchant.withInt": "对实体手持的物品进行附魔。",
    "enchant.withEnum": "对实体手持的物品进行附魔。",
    "event.entity": "为实体触发实体事件。",
    "execute.default": "改变位置与执行者并执行命令。",
    "execute.detect": "改变位置与执行者，并仅当特定方块满足条件时执行命令。",
    "fill.replace.withBlockState": "用指定方块替换区域中的特定方块。",
    "fill.replace.withDataValue": "用指定方块替换区域中的特定方块。",
    "fill.default.withBlockState": "用指定方块填充区域。",
    "fill.default.withDataValue": "用指定方块填充区域。",
    "fog.delete": "从玩家的迷雾栈中移除迷雾。",
    "fog.push": "向玩家的迷雾栈中添加迷雾。",
    "function.default": "调用函数。",
    "gamemode.withEnum": "更改游戏模式。",
    "gamemode.withInt": "更改游戏模式。",
    "gamerule.viewAll": "查看所有游戏规则。",
    "gamerule.boolGameRule": "查看或修改特定布尔类型游戏规则。",
    "gamerule.intGameRule": "查看或修改特定整型游戏规则。",
    "give.default": "给予玩家特定物品。",
    "help.withPage": "按页数列出命令用法。",
    "help.withCommand": "按命令名列出命令用法。",
    "kick.default": "踢出特定玩家。",
    "kill.default": "击杀或移除实体。",
    "list.default": "列出在线玩家。",
    "locate.default": "寻找并确定最近的特定结构的坐标。",
    "loot.give.from.kill": "loot give <players: target> kill <entity: target> [<tool>|mainhand|offhand: string]",
    "loot.give.from.loot": "loot give <players: target> loot <loot_table: string> [<tool>|mainhand|offhand: string]",
    "loot.insert.from.kill": "loot insert <position: x y z> kill <entity: target> [<tool>|mainhand|offhand: string]",
    "loot.insert.from.loot": "loot insert <position: x y z> loot <loot_table: string> [<tool>|mainhand|offhand: string]",
    "loot.spawn.from.kill": "loot spawn <position: x y z> kill <entity: target> [<tool>|mainhand|offhand: string]",
    "loot.spawn.from.loot": "loot spawn <position: x y z> loot <loot_table: string> [<tool>|mainhand|offhand: string]",
    "me.default": "me <message: message>",
    "mobevent.default": "mobevent <event: MobEvent> [value: Boolean]",
    "music.play": "music play <trackName: string> [volume: float] [fadeSeconds: float] [repeatMode: MusicRepeatMode]",
    "music.queue": "music queue <trackName: string> [volume: float] [fadeSeconds: float] [repeatMode: MusicRepeatMode]",
    "music.stop": "music stop [fadeSeconds: float]",
    "music.volume": "music volume <volume: float>",
    "op.default": "op <player: target>",
    "particle.default": "particle <effect: string> [position: x y z]",
    "playanimation.default": "playanimation <entity: target> <animation: string> [next_state: string] [blend_out_time: float] [stop_expression: string] [controller: string]",
    "playsound.default": "playsound <sound: string> [player: target] [position: x y z] [volume: float] [pitch: float] [minimumVolume: float]",
    "reload.default": "reload",
    "replaceitem.block.default": "replaceitem block <position: x y z> slot.container <slotId: int> <itemName: Item> [amount: int] [data: int] [components: json]",
    "replaceitem.block.withOldItemHandling": "replaceitem block <position: x y z> slot.container <slotId: int> <oldItemHandling: ReplaceMode> <itemName: Item> [amount: int] [data: int] [components: json]",
    "replaceitem.entity.default": "replaceitem entity <target: target> <slotType: EntityEquipmentSlot> <slotId: int> <itemName: Item> [amount: int] [data: int] [components: json]",
    "replaceitem.entity.withOldItemHandling": "replaceitem entity <target: target> <slotType: EntityEquipmentSlot> <slotId: int> <oldItemHandling: ReplaceMode> <itemName: Item> [amount: int] [data: int] [components: json]",
    "ride.startRiding": "ride <riders: target> start_riding <ride: target> [teleportRules: TeleportRules] [howToFill: FillType]",
    "ride.stopRiding": "ride <riders: target> stop_riding",
    "ride.summonRide": "ride <riders: target> summon_ride <entityType: EntityType> [rideRules: RideRules] [spawnEvent: string] [nameTag: string]",
    "ride.evictRiders": "ride <rides: target> evict_riders",
    "ride.summonRider": "ride <rides: target> summon_rider <entityType: EntityType> [spawnEvent: string] [nameTag: string]",
    "say.default": "say <message: message>",
    "schedule.onAreaLoad.add.box": "schedule on_area_loaded add <from: x y z> <to: x y z> <function: filepath>",
    "schedule.onAreaLoad.add.circle": "schedule on_area_loaded add circle <center: x y z> <radius: int> <function: filepath>",
    "schedule.onAreaLoad.add.tickingArea": "schedule on_area_loaded add tickingarea <name: string> <function: filepath>",
    "scoreboard.objectives.add": "scoreboard objectives add <objective: string> dummy [displayName: string]",
    "scoreboard.objectives.list": "scoreboard objectives list",
    "scoreboard.objectives.remove": "scoreboard objectives remove <objective: string>",
    "scoreboard.objectives.setdisplay.default": "scoreboard objectives setdisplay <list|sidebar> [objective: string] [ascending|descending]",
    "scoreboard.objectives.setdisplay.belowName": "scoreboard objectives setdisplay belowname [objective: string]",
    "scoreboard.players.modify": "scoreboard players <add|remove|set> <player: target> <objective: string> <count: int>",
    "scoreboard.players.list": "scoreboard players list [playername: target]",
    "scoreboard.players.operation": "scoreboard players operation <targetName: target> <targetObjective: string> <operation: operator> <selector: target> <objective: string>",
    "scoreboard.players.random": "scoreboard players random <player: target> <objective: string> <min: int> <max: int>",
    "scoreboard.players.reset": "scoreboard players reset <player: target> [objective: string]",
    "scoreboard.players.test": "scoreboard players test <player: target> <objective: string> <min: wildcard int> [max: wildcard int]",
    "setblock.withBlockState": "setblock <position: x y z> <tileName: Block> [blockStates: block states] [replace|destroy|keep]",
    "setblock.withDataValue": "setblock <position: x y z> <tileName: Block> [tileData: int] [replace|destroy|keep]",
    "setmaxplayers.default": "setmaxplayers <maxPlayers: int>",
    "setworldspawn.default": "setworldspawn [spawnPoint: x y z]",
    "spawnpoint.default": "spawnpoint [player: target] [spawnPos: x y z]",
    "spreadplayers.default": "spreadplayers <x: value> <z: value> <spreadDistance: float> <maxRange: float> <victim: target>",
    "stopsound.default": "stopsound <player: target> [sound: string]",
    "structure.delete": "structure delete <name: string>",
    "structure.load.animated": "structure load <name: string> <to: x y z> [rotation: Rotation] [mirror: Mirror] [animationMode: StructureAnimationMode] [animationSeconds: float] [includeEntities: Boolean] [includeBlocks: Boolean] [integrity: float] [seed: string]",
    "structure.load.default": "structure load <name: string> <to: x y z> [rotation: Rotation] [mirror: Mirror] [includeEntities: Boolean] [includeBlocks: Boolean] [integrity: float] [seed: string]",
    "structure.save.default": "structure save <name: string> <from: x y z> <to: x y z> [includeEntities: Boolean] [saveMode: StructureSaveMode] [includeBlocks: Boolean]",
    "structure.save.short": "structure save <name: string> <from: x y z> <to: x y z> [saveMode: StructureSaveMode]",
    "summon.default": "summon <entityType: EntityType> <nameTag: string> [spawnPos: x y z]",
    "summon.withSpawnEvent": "summon <entityType: EntityType> [spawnPos: x y z] [spawnEvent: string] [nameTag: string]",
    "tag.modify": "tag <entity: target> <add|remove> <name: string>",
    "tag.list": "tag <entity: target> list",
    "teleport.self.toEntity": "teleport <destination: target> [checkForBlocks: Boolean]",
    "teleport.self.toPos.default": "teleport <destination: x y z> [checkForBlocks: Boolean]",
    "teleport.self.toPos.withRotation": "teleport <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]",
    "teleport.self.toPos.facing.entity": "teleport <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]",
    "teleport.self.toPos.facing.position": "teleport <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]",
    "teleport.entity.toEntity": "teleport <victim: target> <destination: target> [checkForBlocks: Boolean]",
    "teleport.entity.toPos.default": "teleport <victim: target> <destination: x y z> [checkForBlocks: Boolean]",
    "teleport.entity.toPos.withRotation": "teleport <victim: target> <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]",
    "teleport.entity.toPos.facing.entity": "teleport <victim: target> <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]",
    "teleport.entity.toPos.facing.position": "teleport <victim: target> <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]",
    "tell.default": "msg <target: target> <message: message>",
    "tellraw.default": "tellraw <target: target> <raw json message: json>",
    "testfor.default": "testfor <victim: target>",
    "testforblock.withBlockState": "testforblock <position: x y z> <tileName: Block> [blockStates: block states]",
    "testforblock.withDataValue": "testforblock <position: x y z> <tileName: Block> [dataValue: int]",
    "testforblocks.default": "testforblocks <begin: x y z> <end: x y z> <destination: x y z> [masked|all]",
    "tickingarea.add.box": "tickingarea add <from: x y z> <to: x y z> [name: string] [preload: Boolean]",
    "tickingarea.add.circle": "tickingarea add circle <center: x y z> <radius: int> [name: string] [preload: Boolean]",
    "tickingarea.list": "tickingarea list [all-dimensions: AllDimensions]",
    "tickingarea.preload.withName": "tickingarea preload <name: string> [preload: Boolean]",
    "tickingarea.preload.withPosition": "tickingarea preload <position: x y z> [preload: Boolean]",
    "tickingarea.remove.withName": "tickingarea remove <name: string>",
    "tickingarea.remove.withPosition": "tickingarea remove <position: x y z>",
    "tickingarea.removeAll": "tickingarea remove_all",
    "time.add": "time add <amount: int>",
    "time.query": "time query <time: TimeQuery>",
    "time.set.withInt": "time set <amount: int>",
    "time.set.withEnum": "time set <time: TimeSpec>",
    "title.show": "title <player: target> <title|subtitle|actionbar> <titleText: message>",
    "title.clear": "title <player: target> clear",
    "title.reset": "title <player: target> reset",
    "title.times": "title <player: target> times <fadeIn: int> <stay: int> <fadeOut: int>",
    "titleraw.show": "titleraw <player: target> <titleLocation: TitleRawSet> <raw json titleText: json>",
    "titleraw.clear": "titleraw <player: target> clear",
    "titleraw.reset": "titleraw <player: target> reset",
    "titleraw.times": "titleraw <player: target> times <fadeIn: int> <stay: int> <fadeOut: int>",
    "toggledownfall.default": "toggledownfall",
    "weather.update": "weather <clear|rain|thunder> [duration: int]",
    "weather.query": "weather query",
    "wsserver.default": "connect <serverUri: text>",
    "xp.withInt": "xp <amount: int> [player: target]",
    "xp.withLevel": "xp <amount: int>L [player: target]",
    "ability.set": "ability <player: target> <ability: Ability> <value: Boolean>",
    "ability.get": "ability <player: target> [ability: Ability]",
    "immutableworld.default": "immutableworld [value: Boolean]",
    "worldbuilder.default": "wb",
    "gametest.clearAll": "gametest clearall",
    "gametest.create": "gametest create <testName: string> [width: int] [height: int] [depth: int]",
    "gametest.pos": "gametest pos",
    "gametest.run.default": "gametest run <testName: GameTestName> <stopOnFailure: Boolean> <repeatCount: int> [rotationSteps: int]",
    "gametest.run.short": "gametest run <testName: GameTestName> [rotationSteps: int]",
    "gametest.runset": "gametest runset [tag: GameTestTag] [rotationSteps: int]",
    "gametest.runthese": "gametest runthese",
    "gametest.runthis": "gametest runthis",
    "script.debugger.close": "script debugger close",
    "script.debugger.connect": "script debugger connect <host: string> <port: int>",
    "script.debugger.listen": "script debugger listen <port: int>",
    "volumearea.add": "volumearea add <identifier: string> <from: x y z> <to: x y z> [name: string]",
    "volumearea.list": "volumearea list [all-dimensions: VolumeAreaAllDimensions]",
    "volumearea.remove.withName": "volumearea remove <name: string>",
    "volumearea.remove.withPosition": "volumearea remove <position: x y z>",
    "volumearea.removeAll": "volumearea remove_all",
    "loot.replace.entity.default.from.kill": "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> <count: int> kill <entity: target> [<tool>|mainhand|offhand: string]",
    "loot.replace.entity.default.from.loot": "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> <count: int> loot <loot_table: string> [<tool>|mainhand|offhand: string]",
    "loot.replace.entity.withCount.from.kill": "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> kill <entity: target> [<tool>|mainhand|offhand: string]",
    "loot.replace.entity.withCount.from.loot": "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> loot <loot_table: string> [<tool>|mainhand|offhand: string]",
    "script.profiler.start": "script profiler start",
    "script.profiler.stop": "script profiler stop",
    // Command Syntax
    "? <page: int>": "this: help.withPage", // 按页数列出命令用法。
    "? [command: CommandName]": "this: help.withCommand", // 按命令名列出命令用法。
    "alwaysday [lock: Boolean]": "this: daylock.default", // 切换昼夜更替锁定。
    "camerashake add <player: target> [intensity: float] [seconds: float] [shakeType: CameraShakeType]": "this: camerashake.add", // 为玩家应用镜头摇晃效果。
    "camerashake stop [player: target]": "this: camerashake.stop", // 为玩家移除镜头摇晃效果。
    "clear [player: target] [itemName: Item] [data: int] [maxCount: int]": "this: clear.default", // 清除玩家物品栏中的物品。
    "clearspawnpoint [player: target]": "this: clearspawnpoint.default", // 重置玩家重生点。
    "clone <begin: x y z> <end: x y z> <destination: x y z> [maskMode: MaskMode] [cloneMode: CloneMode]": "this: clone.default", // 在区域间复制方块。
    "clone <begin: x y z> <end: x y z> <destination: x y z> filtered <cloneMode: CloneMode> <tileName: Block> <blockStates: block states>": "this: clone.filtered.withBlockState", // 在区域间复制方块。
    "clone <begin: x y z> <end: x y z> <destination: x y z> filtered <cloneMode: CloneMode> <tileName: Block> <tileData: int>": "this: clone.filtered.withDataValue", // 在区域间复制方块。
    "connect <serverUri: text>": "this: wsserver.default", // connect <serverUri: text>
    "damage <target: target> <amount: int> <cause: DamageCause> entity <damager: target>": "this: damage.default", // 对实体造成伤害。
    "damage <target: target> <amount: int> [cause: DamageCause]": "this: damage.withDamager", // 对实体造成来源于特定实体的伤害。
    "daylock [lock: Boolean]": "this: daylock.default", // 切换昼夜更替锁定。
    "deop <player: target>": "this: deop.default", // 撤销管理员身份。
    "dialogue change <npc: target> <sceneName: string> [players: target]": "this: dialogue.change", // 更改与NPC的对话场景。
    "dialogue open <npc: target> <player: target> [sceneName: string]": "this: dialogue.open", // 打开与NPC的对话场景。
    "difficulty <difficulty: Difficulty>": "this: difficulty.withEnum", // 更改游戏难度。
    "difficulty <difficulty: int>": "this: difficulty.withInt", // 更改游戏难度。
    "effect <player: target> <effect: Effect> [seconds: int] [amplifier: int] [hideParticles: Boolean]": "this: effect.add", // 为实体添加状态效果。
    "effect <player: target> clear": "this: effect.clear", // 清除实体的状态效果。
    "enchant <player: target> <enchantmentId: int> [level: int]": "this: enchant.withInt", // 对实体手持的物品进行附魔。
    "enchant <player: target> <enchantmentName: Enchant> [level: int]": "this: enchant.withEnum", // 对实体手持的物品进行附魔。
    "event entity <target: target> <eventName: string>": "this: event.entity", // 为实体触发实体事件。
    "execute <origin: target> <position: x y z> <command: command>": "this: execute.default", // 改变位置与执行者并执行命令。
    "execute <origin: target> <position: x y z> detect <detectPos: x y z> <block: Block> <data: int> <command: command>": "this: execute.detect", // 改变位置与执行者，并仅当特定方块满足条件时执行命令。
    "fill <from: x y z> <to: x y z> <tileName: Block> <blockStates: block states> replace [replaceTileName: Block] [replaceBlockStates: block states]": "this: fill.replace.withBlockState", // 用指定方块替换区域中的特定方块。
    "fill <from: x y z> <to: x y z> <tileName: Block> <tileData: int> replace [replaceTileName: Block] [replaceDataValue: int]": "this: fill.replace.withDataValue", // 用指定方块替换区域中的特定方块。
    "fill <from: x y z> <to: x y z> <tileName: Block> [blockStates: block states] [oldBlockHandling: FillMode]": "this: fill.default.withBlockState", // 用指定方块填充区域。
    "fill <from: x y z> <to: x y z> <tileName: Block> [tileData: int] [oldBlockHandling: FillMode]": "this: fill.default.withDataValue", // 用指定方块填充区域。
    "fog <victim: target> <mode: delete> <userProvidedId: string>": "this: fog.delete", // 从玩家的迷雾栈中移除迷雾。
    "fog <victim: target> push <fogId: string> <userProvidedId: string>": "this: fog.push", // 向玩家的迷雾栈中添加迷雾。
    "function <name: filepath>": "this: function.default", // 调用函数。
    "gamemode <gameMode: GameMode> [player: target]": "this: gamemode.withEnum", // 更改游戏模式。
    "gamemode <gameMode: int> [player: target]": "this: gamemode.withInt", // 更改游戏模式。
    "gamerule": "this: gamerule.viewAll", // 查看所有游戏规则。
    "gamerule <rule: BoolGameRule> [value: Boolean]": "this: gamerule.boolGameRule", // 查看或修改特定布尔类型游戏规则。
    "gamerule <rule: IntGameRule> [value: int]": "this: gamerule.intGameRule", // 查看或修改特定整型游戏规则。
    "give <player: target> <itemName: Item> [amount: int] [data: int] [components: json]": "this: give.default", // 给予玩家特定物品。
    "help <page: int>": "this: help.withPage", // 按页数列出命令用法。
    "help [command: CommandName]": "this: help.withCommand", // 按命令名列出命令用法。
    "kick <name: target> <reason: message>": "this: kick.default", // 踢出特定玩家。
    "kill [target: target]": "this: kill.default", // 击杀或移除实体。
    "list": "this: list.default", // 列出在线玩家。
    "locate <feature: Feature> [useNewChunksOnly: Boolean]": "this: locate.default", // 寻找并确定最近的特定结构的坐标。
    "loot give <players: target> kill <entity: target> [<tool>|mainhand|offhand: string]": "this: loot.give.from.kill", // loot give <players: target> kill <entity: target> [<tool>|mainhand|offhand: string]
    "loot give <players: target> loot <loot_table: string> [<tool>|mainhand|offhand: string]": "this: loot.give.from.loot", // loot give <players: target> loot <loot_table: string> [<tool>|mainhand|offhand: string]
    "loot insert <position: x y z> kill <entity: target> [<tool>|mainhand|offhand: string]": "this: loot.insert.from.kill", // loot insert <position: x y z> kill <entity: target> [<tool>|mainhand|offhand: string]
    "loot insert <position: x y z> loot <loot_table: string> [<tool>|mainhand|offhand: string]": "this: loot.insert.from.loot", // loot insert <position: x y z> loot <loot_table: string> [<tool>|mainhand|offhand: string]
    "loot spawn <position: x y z> kill <entity: target> [<tool>|mainhand|offhand: string]": "this: loot.spawn.from.kill", // loot spawn <position: x y z> kill <entity: target> [<tool>|mainhand|offhand: string]
    "loot spawn <position: x y z> loot <loot_table: string> [<tool>|mainhand|offhand: string]": "this: loot.spawn.from.loot", // loot spawn <position: x y z> loot <loot_table: string> [<tool>|mainhand|offhand: string]
    "me <message: message>": "this: me.default", // me <message: message>
    "mobevent <event: MobEvent> [value: Boolean]": "this: mobevent.default", // mobevent <event: MobEvent> [value: Boolean]
    "msg <target: target> <message: message>": "this: tell.default", // msg <target: target> <message: message>
    "music play <trackName: string> [volume: float] [fadeSeconds: float] [repeatMode: MusicRepeatMode]": "this: music.play", // music play <trackName: string> [volume: float] [fadeSeconds: float] [repeatMode: MusicRepeatMode]
    "music queue <trackName: string> [volume: float] [fadeSeconds: float] [repeatMode: MusicRepeatMode]": "this: music.queue", // music queue <trackName: string> [volume: float] [fadeSeconds: float] [repeatMode: MusicRepeatMode]
    "music stop [fadeSeconds: float]": "this: music.stop", // music stop [fadeSeconds: float]
    "music volume <volume: float>": "this: music.volume", // music volume <volume: float>
    "op <player: target>": "this: op.default", // op <player: target>
    "particle <effect: string> [position: x y z]": "this: particle.default", // particle <effect: string> [position: x y z]
    "playanimation <entity: target> <animation: string> [next_state: string] [blend_out_time: float] [stop_expression: string] [controller: string]": "this: playanimation.default", // playanimation <entity: target> <animation: string> [next_state: string] [blend_out_time: float] [stop_expression: string] [controller: string]
    "playsound <sound: string> [player: target] [position: x y z] [volume: float] [pitch: float] [minimumVolume: float]": "this: playsound.default", // playsound <sound: string> [player: target] [position: x y z] [volume: float] [pitch: float] [minimumVolume: float]
    "reload": "this: reload.default", // reload
    "replaceitem block <position: x y z> slot.container <slotId: int> <itemName: Item> [amount: int] [data: int] [components: json]": "this: replaceitem.block.default", // replaceitem block <position: x y z> slot.container <slotId: int> <itemName: Item> [amount: int] [data: int] [components: json]
    "replaceitem block <position: x y z> slot.container <slotId: int> <oldItemHandling: ReplaceMode> <itemName: Item> [amount: int] [data: int] [components: json]": "this: replaceitem.block.withOldItemHandling", // replaceitem block <position: x y z> slot.container <slotId: int> <oldItemHandling: ReplaceMode> <itemName: Item> [amount: int] [data: int] [components: json]
    "replaceitem entity <target: target> <slotType: EntityEquipmentSlot> <slotId: int> <itemName: Item> [amount: int] [data: int] [components: json]": "this: replaceitem.entity.default", // replaceitem entity <target: target> <slotType: EntityEquipmentSlot> <slotId: int> <itemName: Item> [amount: int] [data: int] [components: json]
    "replaceitem entity <target: target> <slotType: EntityEquipmentSlot> <slotId: int> <oldItemHandling: ReplaceMode> <itemName: Item> [amount: int] [data: int] [components: json]": "this: replaceitem.entity.withOldItemHandling", // replaceitem entity <target: target> <slotType: EntityEquipmentSlot> <slotId: int> <oldItemHandling: ReplaceMode> <itemName: Item> [amount: int] [data: int] [components: json]
    "ride <riders: target> start_riding <ride: target> [teleportRules: TeleportRules] [howToFill: FillType]": "this: ride.startRiding", // ride <riders: target> start_riding <ride: target> [teleportRules: TeleportRules] [howToFill: FillType]
    "ride <riders: target> stop_riding": "this: ride.stopRiding", // ride <riders: target> stop_riding
    "ride <riders: target> summon_ride <entityType: EntityType> [rideRules: RideRules] [spawnEvent: string] [nameTag: string]": "this: ride.summonRide", // ride <riders: target> summon_ride <entityType: EntityType> [rideRules: RideRules] [spawnEvent: string] [nameTag: string]
    "ride <rides: target> evict_riders": "this: ride.evictRiders", // ride <rides: target> evict_riders
    "ride <rides: target> summon_rider <entityType: EntityType> [spawnEvent: string] [nameTag: string]": "this: ride.summonRider", // ride <rides: target> summon_rider <entityType: EntityType> [spawnEvent: string] [nameTag: string]
    "say <message: message>": "this: say.default", // say <message: message>
    "schedule on_area_loaded add <from: x y z> <to: x y z> <function: filepath>": "this: schedule.onAreaLoad.add.box", // schedule on_area_loaded add <from: x y z> <to: x y z> <function: filepath>
    "schedule on_area_loaded add circle <center: x y z> <radius: int> <function: filepath>": "this: schedule.onAreaLoad.add.circle", // schedule on_area_loaded add circle <center: x y z> <radius: int> <function: filepath>
    "schedule on_area_loaded add tickingarea <name: string> <function: filepath>": "this: schedule.onAreaLoad.add.tickingArea", // schedule on_area_loaded add tickingarea <name: string> <function: filepath>
    "scoreboard objectives add <objective: string> dummy [displayName: string]": "this: scoreboard.objectives.add", // scoreboard objectives add <objective: string> dummy [displayName: string]
    "scoreboard objectives list": "this: scoreboard.objectives.list", // scoreboard objectives list
    "scoreboard objectives remove <objective: string>": "this: scoreboard.objectives.remove", // scoreboard objectives remove <objective: string>
    "scoreboard objectives setdisplay <list|sidebar> [objective: string] [ascending|descending]": "this: scoreboard.objectives.setdisplay.default", // scoreboard objectives setdisplay <list|sidebar> [objective: string] [ascending|descending]
    "scoreboard objectives setdisplay belowname [objective: string]": "this: scoreboard.objectives.setdisplay.belowName", // scoreboard objectives setdisplay belowname [objective: string]
    "scoreboard players <add|remove|set> <player: target> <objective: string> <count: int>": "this: scoreboard.players.modify", // scoreboard players <add|remove|set> <player: target> <objective: string> <count: int>
    "scoreboard players list [playername: target]": "this: scoreboard.players.list", // scoreboard players list [playername: target]
    "scoreboard players operation <targetName: target> <targetObjective: string> <operation: operator> <selector: target> <objective: string>": "this: scoreboard.players.operation", // scoreboard players operation <targetName: target> <targetObjective: string> <operation: operator> <selector: target> <objective: string>
    "scoreboard players random <player: target> <objective: string> <min: int> <max: int>": "this: scoreboard.players.random", // scoreboard players random <player: target> <objective: string> <min: int> <max: int>
    "scoreboard players reset <player: target> [objective: string]": "this: scoreboard.players.reset", // scoreboard players reset <player: target> [objective: string]
    "scoreboard players test <player: target> <objective: string> <min: wildcard int> [max: wildcard int]": "this: scoreboard.players.test", // scoreboard players test <player: target> <objective: string> <min: wildcard int> [max: wildcard int]
    "setblock <position: x y z> <tileName: Block> [blockStates: block states] [replace|destroy|keep]": "this: setblock.withBlockState", // setblock <position: x y z> <tileName: Block> [blockStates: block states] [replace|destroy|keep]
    "setblock <position: x y z> <tileName: Block> [tileData: int] [replace|destroy|keep]": "this: setblock.withDataValue", // setblock <position: x y z> <tileName: Block> [tileData: int] [replace|destroy|keep]
    "setmaxplayers <maxPlayers: int>": "this: setmaxplayers.default", // setmaxplayers <maxPlayers: int>
    "setworldspawn [spawnPoint: x y z]": "this: setworldspawn.default", // setworldspawn [spawnPoint: x y z]
    "spawnpoint [player: target] [spawnPos: x y z]": "this: spawnpoint.default", // spawnpoint [player: target] [spawnPos: x y z]
    "spreadplayers <x: value> <z: value> <spreadDistance: float> <maxRange: float> <victim: target>": "this: spreadplayers.default", // spreadplayers <x: value> <z: value> <spreadDistance: float> <maxRange: float> <victim: target>
    "stopsound <player: target> [sound: string]": "this: stopsound.default", // stopsound <player: target> [sound: string]
    "structure delete <name: string>": "this: structure.delete", // structure delete <name: string>
    "structure load <name: string> <to: x y z> [rotation: Rotation] [mirror: Mirror] [animationMode: StructureAnimationMode] [animationSeconds: float] [includeEntities: Boolean] [includeBlocks: Boolean] [integrity: float] [seed: string]": "this: structure.load.animated", // structure load <name: string> <to: x y z> [rotation: Rotation] [mirror: Mirror] [animationMode: StructureAnimationMode] [animationSeconds: float] [includeEntities: Boolean] [includeBlocks: Boolean] [integrity: float] [seed: string]
    "structure load <name: string> <to: x y z> [rotation: Rotation] [mirror: Mirror] [includeEntities: Boolean] [includeBlocks: Boolean] [integrity: float] [seed: string]": "this: structure.load.default", // structure load <name: string> <to: x y z> [rotation: Rotation] [mirror: Mirror] [includeEntities: Boolean] [includeBlocks: Boolean] [integrity: float] [seed: string]
    "structure save <name: string> <from: x y z> <to: x y z> [includeEntities: Boolean] [saveMode: StructureSaveMode] [includeBlocks: Boolean]": "this: structure.save.default", // structure save <name: string> <from: x y z> <to: x y z> [includeEntities: Boolean] [saveMode: StructureSaveMode] [includeBlocks: Boolean]
    "structure save <name: string> <from: x y z> <to: x y z> [saveMode: StructureSaveMode]": "this: structure.save.short", // structure save <name: string> <from: x y z> <to: x y z> [saveMode: StructureSaveMode]
    "summon <entityType: EntityType> <nameTag: string> [spawnPos: x y z]": "this: summon.default", // summon <entityType: EntityType> <nameTag: string> [spawnPos: x y z]
    "summon <entityType: EntityType> [spawnPos: x y z] [spawnEvent: string] [nameTag: string]": "this: summon.withSpawnEvent", // summon <entityType: EntityType> [spawnPos: x y z] [spawnEvent: string] [nameTag: string]
    "tag <entity: target> <add|remove> <name: string>": "this: tag.modify", // tag <entity: target> <add|remove> <name: string>
    "tag <entity: target> list": "this: tag.list", // tag <entity: target> list
    "teleport <destination: target> [checkForBlocks: Boolean]": "this: teleport.self.toEntity", // teleport <destination: target> [checkForBlocks: Boolean]
    "teleport <destination: x y z> [checkForBlocks: Boolean]": "this: teleport.self.toPos.default", // teleport <destination: x y z> [checkForBlocks: Boolean]
    "teleport <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]": "this: teleport.self.toPos.withRotation", // teleport <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]
    "teleport <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]": "this: teleport.self.toPos.facing.entity", // teleport <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]
    "teleport <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]": "this: teleport.self.toPos.facing.position", // teleport <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]
    "teleport <victim: target> <destination: target> [checkForBlocks: Boolean]": "this: teleport.entity.toEntity", // teleport <victim: target> <destination: target> [checkForBlocks: Boolean]
    "teleport <victim: target> <destination: x y z> [checkForBlocks: Boolean]": "this: teleport.entity.toPos.default", // teleport <victim: target> <destination: x y z> [checkForBlocks: Boolean]
    "teleport <victim: target> <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]": "this: teleport.entity.toPos.withRotation", // teleport <victim: target> <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]
    "teleport <victim: target> <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]": "this: teleport.entity.toPos.facing.entity", // teleport <victim: target> <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]
    "teleport <victim: target> <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]": "this: teleport.entity.toPos.facing.position", // teleport <victim: target> <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]
    "tell <target: target> <message: message>": "this: tell.default", // msg <target: target> <message: message>
    "tellraw <target: target> <raw json message: json>": "this: tellraw.default", // tellraw <target: target> <raw json message: json>
    "testfor <victim: target>": "this: testfor.default", // testfor <victim: target>
    "testforblock <position: x y z> <tileName: Block> [blockStates: block states]": "this: testforblock.withBlockState", // testforblock <position: x y z> <tileName: Block> [blockStates: block states]
    "testforblock <position: x y z> <tileName: Block> [dataValue: int]": "this: testforblock.withDataValue", // testforblock <position: x y z> <tileName: Block> [dataValue: int]
    "testforblocks <begin: x y z> <end: x y z> <destination: x y z> [masked|all]": "this: testforblocks.default", // testforblocks <begin: x y z> <end: x y z> <destination: x y z> [masked|all]
    "tickingarea add <from: x y z> <to: x y z> [name: string] [preload: Boolean]": "this: tickingarea.add.box", // tickingarea add <from: x y z> <to: x y z> [name: string] [preload: Boolean]
    "tickingarea add circle <center: x y z> <radius: int> [name: string] [preload: Boolean]": "this: tickingarea.add.circle", // tickingarea add circle <center: x y z> <radius: int> [name: string] [preload: Boolean]
    "tickingarea list [all-dimensions: AllDimensions]": "this: tickingarea.list", // tickingarea list [all-dimensions: AllDimensions]
    "tickingarea preload <name: string> [preload: Boolean]": "this: tickingarea.preload.withName", // tickingarea preload <name: string> [preload: Boolean]
    "tickingarea preload <position: x y z> [preload: Boolean]": "this: tickingarea.preload.withPosition", // tickingarea preload <position: x y z> [preload: Boolean]
    "tickingarea remove <name: string>": "this: tickingarea.remove.withName", // tickingarea remove <name: string>
    "tickingarea remove <position: x y z>": "this: tickingarea.remove.withPosition", // tickingarea remove <position: x y z>
    "tickingarea remove_all": "this: tickingarea.removeAll", // tickingarea remove_all
    "time add <amount: int>": "this: time.add", // time add <amount: int>
    "time query <time: TimeQuery>": "this: time.query", // time query <time: TimeQuery>
    "time set <amount: int>": "this: time.set.withInt", // time set <amount: int>
    "time set <time: TimeSpec>": "this: time.set.withEnum", // time set <time: TimeSpec>
    "title <player: target> <title|subtitle|actionbar> <titleText: message>": "this: title.show", // title <player: target> <title|subtitle|actionbar> <titleText: message>
    "title <player: target> clear": "this: title.clear", // title <player: target> clear
    "title <player: target> reset": "this: title.reset", // title <player: target> reset
    "title <player: target> times <fadeIn: int> <stay: int> <fadeOut: int>": "this: title.times", // title <player: target> times <fadeIn: int> <stay: int> <fadeOut: int>
    "titleraw <player: target> <titleLocation: TitleRawSet> <raw json titleText: json>": "this: titleraw.show", // titleraw <player: target> <titleLocation: TitleRawSet> <raw json titleText: json>
    "titleraw <player: target> clear": "this: titleraw.clear", // titleraw <player: target> clear
    "titleraw <player: target> reset": "this: titleraw.reset", // titleraw <player: target> reset
    "titleraw <player: target> times <fadeIn: int> <stay: int> <fadeOut: int>": "this: titleraw.times", // titleraw <player: target> times <fadeIn: int> <stay: int> <fadeOut: int>
    "toggledownfall": "this: toggledownfall.default", // toggledownfall
    "tp <destination: target> [checkForBlocks: Boolean]": "this: teleport.self.toEntity", // teleport <destination: target> [checkForBlocks: Boolean]
    "tp <destination: x y z> [checkForBlocks: Boolean]": "this: teleport.self.toPos.default", // teleport <destination: x y z> [checkForBlocks: Boolean]
    "tp <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]": "this: teleport.self.toPos.withRotation", // teleport <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]
    "tp <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]": "this: teleport.self.toPos.facing.entity", // teleport <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]
    "tp <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]": "this: teleport.self.toPos.facing.position", // teleport <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]
    "tp <victim: target> <destination: target> [checkForBlocks: Boolean]": "this: teleport.entity.toEntity", // teleport <victim: target> <destination: target> [checkForBlocks: Boolean]
    "tp <victim: target> <destination: x y z> [checkForBlocks: Boolean]": "this: teleport.entity.toPos.default", // teleport <victim: target> <destination: x y z> [checkForBlocks: Boolean]
    "tp <victim: target> <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]": "this: teleport.entity.toPos.withRotation", // teleport <victim: target> <destination: x y z> [yRot: value] [xRot: value] [checkForBlocks: Boolean]
    "tp <victim: target> <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]": "this: teleport.entity.toPos.facing.entity", // teleport <victim: target> <destination: x y z> facing <lookAtEntity: target> [checkForBlocks: Boolean]
    "tp <victim: target> <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]": "this: teleport.entity.toPos.facing.position", // teleport <victim: target> <destination: x y z> facing <lookAtPosition: x y z> [checkForBlocks: Boolean]
    "w <target: target> <message: message>": "this: tell.default", // msg <target: target> <message: message>
    "weather <clear|rain|thunder> [duration: int]": "this: weather.update", // weather <clear|rain|thunder> [duration: int]
    "weather query": "this: weather.query", // weather query
    "wsserver <serverUri: text>": "this: wsserver.default", // connect <serverUri: text>
    "xp <amount: int> [player: target]": "this: xp.withInt", // xp <amount: int> [player: target]
    "xp <amount: int>L [player: target]": "this: xp.withLevel", // xp <amount: int>L [player: target]
    "ability <player: target> <ability: Ability> <value: Boolean>": "this: ability.set", // ability <player: target> <ability: Ability> <value: Boolean>
    "ability <player: target> [ability: Ability]": "this: ability.get", // ability <player: target> [ability: Ability]
    "immutableworld [value: Boolean]": "this: immutableworld.default", // immutableworld [value: Boolean]
    "wb": "this: worldbuilder.default", // wb
    "worldbuilder": "this: worldbuilder.default", // wb
    "gametest clearall": "this: gametest.clearAll", // gametest clearall
    "gametest create <testName: string> [width: int] [height: int] [depth: int]": "this: gametest.create", // gametest create <testName: string> [width: int] [height: int] [depth: int]
    "gametest pos": "this: gametest.pos", // gametest pos
    "gametest run <testName: GameTestName> <stopOnFailure: Boolean> <repeatCount: int> [rotationSteps: int]": "this: gametest.run.default", // gametest run <testName: GameTestName> <stopOnFailure: Boolean> <repeatCount: int> [rotationSteps: int]
    "gametest run <testName: GameTestName> [rotationSteps: int]": "this: gametest.run.short", // gametest run <testName: GameTestName> [rotationSteps: int]
    "gametest runset [tag: GameTestTag] [rotationSteps: int]": "this: gametest.runset", // gametest runset [tag: GameTestTag] [rotationSteps: int]
    "gametest runthese": "this: gametest.runthese", // gametest runthese
    "gametest runthis": "this: gametest.runthis", // gametest runthis
    "script debugger close": "this: script.debugger.close", // script debugger close
    "script debugger connect <host: string> <port: int>": "this: script.debugger.connect", // script debugger connect <host: string> <port: int>
    "script debugger listen <port: int>": "this: script.debugger.listen", // script debugger listen <port: int>
    "volumearea add <identifier: string> <from: x y z> <to: x y z> [name: string]": "this: volumearea.add", // volumearea add <identifier: string> <from: x y z> <to: x y z> [name: string]
    "volumearea list [all-dimensions: VolumeAreaAllDimensions]": "this: volumearea.list", // volumearea list [all-dimensions: VolumeAreaAllDimensions]
    "volumearea remove <name: string>": "this: volumearea.remove.withName", // volumearea remove <name: string>
    "volumearea remove <position: x y z>": "this: volumearea.remove.withPosition", // volumearea remove <position: x y z>
    "volumearea remove_all": "this: volumearea.removeAll", // volumearea remove_all
    "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> <count: int> kill <entity: target> [<tool>|mainhand|offhand: string]": "this: loot.replace.entity.default.from.kill", // loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> <count: int> kill <entity: target> [<tool>|mainhand|offhand: string]
    "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> <count: int> loot <loot_table: string> [<tool>|mainhand|offhand: string]": "this: loot.replace.entity.default.from.loot", // loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> <count: int> loot <loot_table: string> [<tool>|mainhand|offhand: string]
    "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> kill <entity: target> [<tool>|mainhand|offhand: string]": "this: loot.replace.entity.withCount.from.kill", // loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> kill <entity: target> [<tool>|mainhand|offhand: string]
    "loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> loot <loot_table: string> [<tool>|mainhand|offhand: string]": "this: loot.replace.entity.withCount.from.loot", // loot replace entity <entity: target> <slotType: EntityEquipmentSlot> <slotId: int> loot <loot_table: string> [<tool>|mainhand|offhand: string]
    "gametest run <testName: string> <stopOnFailure: Boolean> <repeatCount: int> [rotationSteps: int]": "this: gametest.run.default", // gametest run <testName: GameTestName> <stopOnFailure: Boolean> <repeatCount: int> [rotationSteps: int]
    "gametest run <testName: string> [rotationSteps: int]": "this: gametest.run.short", // gametest run <testName: GameTestName> [rotationSteps: int]
    "gametest runset [tag: string] [rotationSteps: int]": "this: gametest.runset", // gametest runset [tag: GameTestTag] [rotationSteps: int]
    "script debugger connect [host: string] [port: int]": "this: script.debugger.connect", // script debugger connect <host: string> <port: int>
    "script profiler start": "this: script.profiler.start", // script profiler start
    "script profiler stop": "this: script.profiler.stop" // script profiler stop
}